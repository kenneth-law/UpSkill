-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table (extends Supabase Auth)
CREATE TABLE users_profile (
  id UUID PRIMARY KEY REFERENCES auth.users(id),
  username TEXT UNIQUE,
  display_name TEXT,
  avatar_url TEXT,
  study_streak INTEGER DEFAULT 0,
  total_xp INTEGER DEFAULT 0,
  cat_friendship_level INTEGER DEFAULT 0, -- How much the cat "likes" them
  preferences JSONB DEFAULT '{"cat_snark_level": "medium", "daily_goal_minutes": 15}'::jsonb,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Learning topics/subjects
CREATE TABLE topics (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users_profile(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  target_outcome TEXT, -- "Get conversational in Korean", "Pass calc exam"
  difficulty_level TEXT CHECK (difficulty_level IN ('beginner', 'intermediate', 'advanced')),
  time_budget_minutes INTEGER, -- Daily time commitment
  deadline DATE,
  source_type TEXT CHECK (source_type IN ('pdf', 'url', 'image', 'text', 'generated')),
  source_content TEXT, -- Original content or URL
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Study plans generated by AI
CREATE TABLE study_plans (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  topic_id UUID REFERENCES topics(id) ON DELETE CASCADE,
  plan_structure JSONB NOT NULL, -- Hierarchical plan from LLM
  total_lessons INTEGER,
  estimated_hours DECIMAL(5,2),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Individual lessons within a study plan
CREATE TABLE lessons (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  study_plan_id UUID REFERENCES study_plans(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  order_index INTEGER NOT NULL,
  content JSONB, -- Structured lesson content
  estimated_minutes INTEGER,
  mastery_threshold DECIMAL(3,2) DEFAULT 0.8,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Concepts extracted from content
CREATE TABLE concepts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  topic_id UUID REFERENCES topics(id) ON DELETE CASCADE,
  term TEXT NOT NULL,
  definition TEXT NOT NULL,
  importance INTEGER CHECK (importance BETWEEN 1 AND 5),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Questions generated for quizzes
CREATE TABLE questions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  topic_id UUID REFERENCES topics(id) ON DELETE CASCADE,
  lesson_id UUID REFERENCES lessons(id) ON DELETE SET NULL,
  concept_id UUID REFERENCES concepts(id) ON DELETE SET NULL,
  question_text TEXT NOT NULL,
  question_type TEXT CHECK (question_type IN ('mcq', 'true_false', 'short_answer')),
  options JSONB, -- For MCQs
  correct_answer TEXT NOT NULL,
  explanation TEXT,
  difficulty DECIMAL(3,2) CHECK (difficulty BETWEEN 0 AND 1),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- User progress on lessons
CREATE TABLE lesson_progress (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users_profile(id) ON DELETE CASCADE,
  lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE,
  mastery_level DECIMAL(3,2) DEFAULT 0,
  completed BOOLEAN DEFAULT false,
  last_studied_at TIMESTAMPTZ,
  next_review_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(user_id, lesson_id)
);

-- User responses to questions
CREATE TABLE question_responses (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users_profile(id) ON DELETE CASCADE,
  question_id UUID REFERENCES questions(id) ON DELETE CASCADE,
  user_answer TEXT,
  is_correct BOOLEAN,
  response_time_seconds INTEGER,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Game sessions
CREATE TABLE game_sessions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users_profile(id) ON DELETE CASCADE,
  lesson_id UUID REFERENCES lessons(id) ON DELETE CASCADE,
  game_type TEXT CHECK (game_type IN ('the_board', 'judgement_cat', 'adaptive_quiz', 'capstone_interview')),
  score INTEGER,
  duration_seconds INTEGER,
  mastery_gain DECIMAL(3,2),
  xp_earned INTEGER,
  completed BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Study streaks
CREATE TABLE study_streaks (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users_profile(id) ON DELETE CASCADE,
  streak_date DATE NOT NULL,
  minutes_studied INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(user_id, streak_date)
);

-- Achievements
CREATE TABLE achievements (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  icon_name TEXT,
  requirement_type TEXT CHECK (requirement_type IN ('streak', 'mastery', 'games', 'xp')),
  requirement_value INTEGER,
  xp_reward INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- User achievements
CREATE TABLE user_achievements (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users_profile(id) ON DELETE CASCADE,
  achievement_id UUID REFERENCES achievements(id) ON DELETE CASCADE,
  achieved_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(user_id, achievement_id)
);

-- Cat personality responses
CREATE TABLE cat_responses (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  response_type TEXT CHECK (response_type IN ('correct', 'wrong', 'greeting', 'encouragement', 'roast', 'quit')),
  snark_level TEXT CHECK (snark_level IN ('mild', 'medium', 'spicy', 'nuclear')),
  response_text TEXT NOT NULL,
  emoticon TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Insert some default cat responses
INSERT INTO cat_responses (response_type, snark_level, response_text, emoticon) VALUES
('correct', 'mild', 'Huh. You actually got it right. I''m almost impressed.', '=^.^='),
('correct', 'medium', 'Well well, looks like you''re not completely hopeless.', ':3'),
('correct', 'spicy', 'Correct. Don''t let it go to your head, meatbag.', '>:3'),
('wrong', 'mild', 'That''s incorrect. Even my tail could''ve answered that.', '-.-'),
('wrong', 'medium', 'Wrong. But I expected nothing less from you.', 'Ò.ó'),
('wrong', 'spicy', '*yawns* Wake me when you get one right.', '=_='),
('greeting', 'mild', 'Oh, you''re back. Joy.', ':3'),
('greeting', 'medium', 'Look what the human dragged in. Yourself.', '>:3'),
('greeting', 'spicy', 'Ready to disappoint me again today?', 'ฅ^•ﻌ•^ฅ'),
('encouragement', 'mild', 'You''re improving. Slowly. Like evolution.', ':3'),
('encouragement', 'medium', 'Keep this up and you might actually learn something.', '=^.^='),
('encouragement', 'spicy', 'Not terrible. For a human, anyway.', '>:3'),
('roast', 'mild', 'I''ve seen better cognitive function from a cardboard box.', 'Ò.ó'),
('roast', 'medium', 'Are you even trying? Because it doesn''t look like it.', '-.-'),
('roast', 'spicy', 'This is painful to watch. And I enjoy watching things suffer.', '>:3'),
('quit', 'mild', 'Giving up already? How predictable.', '-.-'),
('quit', 'medium', 'Quitting is what you do best, isn''t it?', 'Ò.ó'),
('quit', 'spicy', 'Run along then. I need my 16th nap of the day anyway.', '=_=');

-- Create indexes for performance
CREATE INDEX idx_topics_user_id ON topics(user_id);
CREATE INDEX idx_lessons_study_plan_id ON lessons(study_plan_id);
CREATE INDEX idx_concepts_topic_id ON concepts(topic_id);
CREATE INDEX idx_questions_topic_id ON questions(topic_id);
CREATE INDEX idx_questions_lesson_id ON questions(lesson_id);
CREATE INDEX idx_lesson_progress_user_id ON lesson_progress(user_id);
CREATE INDEX idx_lesson_progress_next_review ON lesson_progress(next_review_at);
CREATE INDEX idx_question_responses_user_id ON question_responses(user_id);
CREATE INDEX idx_game_sessions_user_id ON game_sessions(user_id);
CREATE INDEX idx_study_streaks_user_id ON study_streaks(user_id);
CREATE INDEX idx_user_achievements_user_id ON user_achievements(user_id);

-- Create RLS policies
ALTER TABLE users_profile ENABLE ROW LEVEL SECURITY;
ALTER TABLE topics ENABLE ROW LEVEL SECURITY;
ALTER TABLE study_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE lessons ENABLE ROW LEVEL SECURITY;
ALTER TABLE concepts ENABLE ROW LEVEL SECURITY;
ALTER TABLE questions ENABLE ROW LEVEL SECURITY;
ALTER TABLE lesson_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE question_responses ENABLE ROW LEVEL SECURITY;
ALTER TABLE game_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE study_streaks ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_achievements ENABLE ROW LEVEL SECURITY;

-- Users can only access their own data
CREATE POLICY users_profile_policy ON users_profile
  FOR ALL USING (auth.uid() = id);

CREATE POLICY topics_policy ON topics
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY study_plans_policy ON study_plans
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM topics
      WHERE topics.id = study_plans.topic_id
      AND topics.user_id = auth.uid()
    )
  );

CREATE POLICY lessons_policy ON lessons
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM study_plans
      JOIN topics ON topics.id = study_plans.topic_id
      WHERE study_plans.id = lessons.study_plan_id
      AND topics.user_id = auth.uid()
    )
  );

CREATE POLICY concepts_policy ON concepts
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM topics
      WHERE topics.id = concepts.topic_id
      AND topics.user_id = auth.uid()
    )
  );

CREATE POLICY questions_policy ON questions
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM topics
      WHERE topics.id = questions.topic_id
      AND topics.user_id = auth.uid()
    )
  );

CREATE POLICY lesson_progress_policy ON lesson_progress
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY question_responses_policy ON question_responses
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY game_sessions_policy ON game_sessions
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY study_streaks_policy ON study_streaks
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY user_achievements_policy ON user_achievements
  FOR ALL USING (auth.uid() = user_id);

-- Allow public read access to achievements and cat responses
ALTER TABLE achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE cat_responses ENABLE ROW LEVEL SECURITY;

CREATE POLICY achievements_policy ON achievements
  FOR SELECT USING (true);

CREATE POLICY cat_responses_policy ON cat_responses
  FOR SELECT USING (true);

-- Create functions for updating timestamps
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for updating timestamps
CREATE TRIGGER update_users_profile_updated_at
BEFORE UPDATE ON users_profile
FOR EACH ROW EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER update_topics_updated_at
BEFORE UPDATE ON topics
FOR EACH ROW EXECUTE FUNCTION update_updated_at();

CREATE TRIGGER update_lesson_progress_updated_at
BEFORE UPDATE ON lesson_progress
FOR EACH ROW EXECUTE FUNCTION update_updated_at();

-- Table for storing extracted text from uploaded files
CREATE TABLE extracted_texts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES users_profile(id) ON DELETE CASCADE,
  file_name TEXT,
  file_path TEXT,
  file_url TEXT,
  text_content TEXT NOT NULL,
  source_type TEXT CHECK (source_type IN ('pdf', 'txt', 'paste')),
  processed BOOLEAN DEFAULT false,
  topic_id UUID REFERENCES topics(id) ON DELETE SET NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create index for performance
CREATE INDEX idx_extracted_texts_user_id ON extracted_texts(user_id);

-- Enable row level security
ALTER TABLE extracted_texts ENABLE ROW LEVEL SECURITY;

-- Users can only access their own extracted texts
CREATE POLICY extracted_texts_policy ON extracted_texts
  FOR ALL USING (auth.uid() = user_id);

-- Create trigger for updating timestamps
CREATE TRIGGER update_extracted_texts_updated_at
BEFORE UPDATE ON extracted_texts
FOR EACH ROW EXECUTE FUNCTION update_updated_at();
